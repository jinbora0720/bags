# Modified Ramsay's horseshoe
rm(list = ls())

# dependencies
library(tidyverse)
theme_set(theme_bw())
library(mgcv)
library(fields)
library(rgeos)
library(sf)
# detach("package:boraGP", unload = TRUE)
# devtools::install_github('jinbora0720/boraGP')
library(boraGP)
library(INLA)

# horseshoe polygon
fsb <- fs.boundary()
p <- Polygon(cbind(fsb$x, fsb$y))
p <- Polygons(list(p), ID = "none")
poly <- SpatialPolygons(list(p))

# complement polygon
bb <- Polygon(cbind(c(-0.9, -0.9, 3.4, 3.4, -0.9), 
                    c(0.9, -0.9, -0.9, 0.9, 0.9)), hole=FALSE)
bbox <- SpatialPolygons(list(Polygons(list(bb), ID = "none")))
rest <- gDifference(bbox, poly)

rest_sf <- st_as_sf(rest)
hs_sf <- st_as_sf(poly)

#------#
# data #
#------#
xm <- 125 # 250
yn <- 50 # 100
x <- seq(-1, 4, length = xm)
y <- seq(-1, 1, length = yn)
xx <- rep(x, yn)
yy <- rep(y, rep(xm, yn))
z <- mgcv::fs.test(xx, yy)
zz <- matrix(z, xm, yn)

# is.na(w) = T outside the horseshoe
data <- data.frame(easting = xx, northing = yy, w = as.numeric(zz)) %>% 
  na.omit()

# create y 
tau_sq <- 0.1^2
set.seed(123)
data_hs <- data %>%
  mutate(y = w + sqrt(tau_sq)*rnorm(nrow(data)))

# remove 4 points that intersect with barriers 
coords_hs_sf <- st_as_sf(data_hs %>% select(easting, northing), coords = c("easting", "northing"))
dlt_idx <- unlist(st_intersects(rest_sf, coords_hs_sf$geometry))
data_hs <- data_hs[-dlt_idx,]
n <- nrow(data_hs)
rm(coords_hs_sf, dlt_idx)

# simulation variables 
mlist <- c(10, 15, 20)
ntrlist <- c(300, 600, 1000)
rplc <- 30
set.seed(120)
seedsave <- sample.int(1e3, size = rplc*length(mlist)*length(ntrlist))
seedmat <- data.frame(M = rep(mlist, each = rplc*length(ntrlist)), 
                      N_tr = rep(rep(ntrlist, each = rplc), times = length(mlist)), 
                      seed = seedsave)

# save results 
predres = paramres = timeres <- list()

# for barrierSGF, varying m is meaningless 
# use seed for each n at m = 10
m <- 10

for (i in 1:length(ntrlist)) {
  n_tr <- ntrlist[i]
  n_tt <- n - n_tr
  listname <- paste0("n=",n_tr)
  
  # save results
  timeres_tmp <- matrix(0, nrow = rplc, ncol = 3) 
  colnames(timeres_tmp) <- c("user", "system", "elapsed")
  predres_tmp = paramres_tmp <- matrix(0, nrow = rplc, ncol = 4) 
  colnames(predres_tmp) <- c("rmspe", "mape", "coverage", "meanwidth")
  colnames(paramres_tmp) <- c("beta", "sigsq", "tausq", "phi")
  seedlist <- seedmat %>% filter(M == m, N_tr == n_tr) %>% select(seed) %>% unlist() %>% as.numeric()
  
  cat(listname,'\n')
  pb = txtProgressBar(style=3,width=50)
  for (s in 1:rplc) {
    seed <- seedlist[s]
    set.seed(seed)
    idx_tr <- sample.int(n, n_tr)
    
    # training data
    coords_tr <- data_hs[idx_tr, c("easting", "northing")]; rownames(coords_tr) <- NULL
    y_tr <- data_hs[idx_tr,"y"]
    
    # test data
    coords_tt <- data_hs[-idx_tr, c("easting", "northing")]; rownames(coords_tt) <- NULL
    y_tt <- data_hs[-idx_tr,"y"]
    
    # mesh 
    max.edge <- 0.2
    mesh <- inla.mesh.2d(boundary = poly,
                         loc = coords_tr,
                         max.edge = c(1,5)*max.edge,
                         cutoff = 0.04,
                         offset = c(max.edge, 1.5))
    
    # barrier model
    tl <- length(mesh$graph$tv[,1])
    # - the number of triangles in the mesh != mesh$n
    posTri <- matrix(0, tl, 2)
    for (t in 1:tl){
      temp <- mesh$loc[mesh$graph$tv[t, ], ]
      posTri[t,] <- colMeans(temp)[c(1,2)]
    }
    posTri <- SpatialPoints(posTri)
    # - compute the triangle positions
    
    normal <- over(poly, SpatialPoints(posTri), returnList = T)
    barrier.triangles <- setdiff(1:tl, unlist(normal))
    poly.barrier <- inla.barrier.polygon(mesh, barrier.triangles)
    
    # connect observations to mesh nodes
    A.obs <- inla.spde.make.A(mesh, loc = as.matrix(coords_tr))
    stk.obs <- inla.stack(data = list(y = y_tr),
                          effects = list(s = 1:mesh$n, # spatial random effects
                                         data.frame(int = rep(1,n_tr))),
                          A = list(A.obs, 1),
                          remove.unused = FALSE, tag = "obs")
    
    # same for prediction
    proj.pred <- inla.mesh.projector(mesh, loc = as.matrix(coords_tt))
    A.pred <- inla.spde.make.A(mesh, loc = proj.pred$loc)
    stk.pred <- inla.stack(data = list(y = NA),
                           A = list(A.pred, 1),
                           effects = list(s = 1:mesh$n,
                                          data.frame(int = rep(1,n_tt))),
                           tag = "pred")
    stk <- inla.stack(stk.obs, stk.pred)
    
    barrier.model <- inla.barrier.pcmatern(mesh, barrier.triangles = barrier.triangles,
                                           prior.range = c(1, .5), # P(range < 1) = 0.5
                                           prior.sigma = c(3, 0.01)) # P(sigma > 3) = 0.01
    
    formula <- y~ -1 + int + f(s, model=barrier.model) 
    time_inla <- system.time({
      res <- inla(formula,
                  data=inla.stack.data(stk),
                  control.predictor=list(A=inla.stack.A(stk), compute = TRUE),
                  control.compute=list(return.marginals.predictor=TRUE),
                  family="gaussian", 
                  control.inla= list(int.strategy = "eb"), num.threads = 10)
    })
    
    # time 
    timeres_tmp[s,] <- as.numeric(time_inla)[1:3]
    
    # summary results
    index.pred <- c(inla.stack.index(stk, "pred")$data)
    y_inla <- res$summary.fitted.values[index.pred, "mean"]
    inla_sd <- sqrt(res$summary.fitted.values[index.pred,"sd"]^2 # variability from the coefficient
                    + 1/res$summary.hyperpar[1,"mean"]) # tausq
    y_inla_low <- y_inla + qnorm(.025)*inla_sd
    y_inla_high <- y_inla + qnorm(.975)*inla_sd
    predres_tmp[s,] <- data.frame(y_tt = y_tt, yhatI = y_inla, lowerI = y_inla_low, upperI = y_inla_high) %>% 
      mutate(errorI = y_tt - yhatI,
             widthI = upperI-lowerI,
             coverI = ifelse((y_tt > lowerI & y_tt < upperI), 1, 0)) %>% 
      summarise(rmspe = sqrt(mean(errorI^2)),
                mape = mean(abs(errorI)),
                coverage = mean(coverI),
                meanwidth = mean(widthI)) %>% 
      as.numeric()
    
    ## beta 
    paramres_tmp[s,1] <- as.numeric(res$summary.fixed[1])
    
    ## theta
    # sigma = exp(theta1)
    paramres_tmp[s,2] <- res$internal.marginals.hyperpar[2] %>%
      lapply(function(m) {
        inla.tmarginal(function(x) exp(x)^2, m)
      }) %>%
      sapply(function(m)
        unlist(inla.zmarginal(m, silent = TRUE))[1]) %>% as.numeric()
    
    # tausq
    paramres_tmp[s,3] <- res$internal.marginals.hyperpar[1] %>%
      lapply(function(m) {
        inla.tmarginal(function(x) 1/exp(x), m)
      }) %>%
      sapply(function(m)
        unlist(inla.zmarginal(m, silent = TRUE))[1]) %>% as.numeric()
    
    # phi = sqrt(8)/r where spatial range r = exp(theta2)
    paramres_tmp[s,4] <- res$internal.marginals.hyperpar[3] %>%
      lapply(function(m) {
        inla.tmarginal(function(x) sqrt(8)/exp(x), m) 
      }) %>%
      sapply(function(m)
        unlist(inla.zmarginal(m, silent = TRUE))[1]) %>% as.numeric()
    
    setTxtProgressBar(pb, s/rplc) 
  }
  close(pb)
  
  timeres[[listname]] <- timeres_tmp
  predres[[listname]] <- predres_tmp
  paramres[[listname]] <- paramres_tmp
}

saveRDS(list(timeres = timeres, predres = predres, paramres = paramres, seedmat = seedmat),
        "~/PFAS/R/sim7_horseshoe_barrierSGF.RDS")
