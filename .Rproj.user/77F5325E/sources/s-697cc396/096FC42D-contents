###########################
# Simulation: Northerlies #
###########################
#########
# Model #
#########
# y(l) = w(l) + eps(l), i = 1, ..., n
# l = (s, t)
# eps(l) ~ N(0, tau_sq)
# Assume two spatial parents (not fixed across times)
# Assume a nonseparable, stationary, and isotropic spatio-temporal Matern correlation function
# a: temporal decay, a > 0 
# c: spatial decay, c > 0
# kappa: interaction between space and time 
# nu: smoothness 

rm(list = ls())

# dependencies 
library(tidyverse)
theme_set(theme_bw())
library(meshed) # meshed_0.2.tar

# source code 
path <- "~/BAG/"
source(paste0(path, "scr/bdags_spatiotemporal_source_final.R"))
source(paste0(path, "scr/bdags_utils.R"))
Rcpp::sourceCpp(paste0(path, 'scr/bdags_source2.cpp'))
Rcpp::sourceCpp(paste0(path, 'scr/bdags_predict.cpp'))

########
# Data #
########
# specify number of grid on each axis to generate data
ngrid0 <- 193 
n_time0 <- 59
xgrid0 <- seq(0, 1, length = ngrid0)
tgrid0 <- seq(0, 1, length = n_time0)
coords0 <- expand.grid(easting = xgrid0, northing = xgrid0, time = tgrid0) %>%
  arrange(time, easting, northing)
n0 <- nrow(coords0)

# for a subset of data to fit
ngrid <- 25
n_time <- 30
xgrid <- seq(0, 1, length = ngrid)
tgrid <- seq(0, 1, length = n_time)
coords <- expand.grid(easting = xgrid, northing = 1-xgrid, time = tgrid) %>%
  arrange(time, easting, northing)
n <- nrow(coords)

# true parameter values
a <- 5
c <- 20 
kappa <- 1
sig_sq <- 150
nu <- 1.5
tau_sq <- 0.1

# assign partitions 
n_easting <- 2
n_northing <- 6

# mcmc 
mcmc <- list(save=1000, burn=5000, thin=2)

# prior 
tmaxdist <- max(dist(coords[,3], method = "manhattan"))
la <- (1/0.9-1)/tmaxdist # correlation = 0.9 at the maximum distance 
ua <- (1/0.1-1)/tmaxdist # correlation = 0.1 at the maximum distance 
spmaxdist <- max(dist(coords[,1:2]))
lc <- -log(0.95)/(0.1*spmaxdist) # correlation = 0.95 at 1/10 of the maximumal distance 
uc <- -log(0.05)/(0.1*spmaxdist) # correlation = 0.05 at 1/10 of the maximumal distance 

# generate seed
set.seed(123)
seedsave <- sample(10000, 100)
seedsave <- c(seedsave[51:74], 3)

# save results
rmspe = mape = coverage = meanwidth = tausq_hat = sigsq_hat <- rep(0, 25)
psi_hat = tot_time <- matrix(0, nrow = 3, ncol = 25)
z_save <- list()

pb = txtProgressBar(style=3,width=50)
for (s in 1:25) {
  seed <- seedsave[s]
  set.seed(seed)
  
  # create w and y
  data0 <- rmeshedgp(coords = coords0 %>% rename(Var1 = easting, Var2 = northing, Var3 = time),
                     theta = c(a, c, kappa, sig_sq, nu), 
                     axis_partition=c(ngrid0, 1, n_time0), 
                     n_threads = 10) %>% 
    mutate(easting = Var2, northing = 1-Var1, time = Var3) %>% 
    select(easting, northing, time, w)
  data0$y <- data0$w + sqrt(tau_sq)*rnorm(n0)
  data <- inner_join(coords, data0, by = c("easting", "northing", "time"))

  #################
  # Training data #
  #################
  # train data
  prob <- 0.8 
  grid0 <- expand.grid(easting = xgrid, northing = 1-xgrid)
  
  idx_tr_tmp <- sort(sample(nrow(grid0), nrow(grid0)*prob))
  xygrid_tr <- list()
  for (tt in 1:n_time) {
    xygrid_tr[[tt]] <- data.frame(grid0[idx_tr_tmp,], time = tgrid[tt])
  }
  xygrid_tr <- do.call(rbind, xygrid_tr) %>% arrange(easting, northing, time)
  data_tr <- left_join(xygrid_tr,
                       data %>% mutate(idx = 1:n), 
                       by = c("easting", "northing", "time"))
  tr_idx <- data_tr$idx
  n_tr <- length(tr_idx)
  n_tt <- n - n_tr
  w_tr <- data_tr$w
  w_tt <- data$w[-tr_idx]
  y_tr <- data_tr$y
  y_tt <- data$y[-tr_idx]
  
  coords_tr <- data_tr[, c("easting", "northing", "time")] 
  coords_tt <- data[-tr_idx, c("easting", "northing", "time")] 
  
  # partition the training set domain 
  nd <- floor(log10(max(n_northing, n_easting, n_time))) + 1
  coords_ptt <- rbind(coords_tr[,c("easting", "northing", "time")], 
                      coords_tt[,c("easting", "northing", "time")])
  coords_ptt$row <- (n_northing+1) - 
    as.numeric(cut_interval(coords_ptt$northing, 
                            n = n_northing, 
                            labels = 1:n_northing)) # 1 from the top 
  coords_ptt$col <- as.numeric(cut_interval(coords_ptt$easting, 
                                            n = n_easting, 
                                            labels = 1:n_easting))
  coords_ptt$time_d <- as.numeric(as.character(coords_ptt$time*(n_time-1) + 1))
  coords_ptt$partition <- sprintf(ptt_format(nd), 
                                  coords_ptt$row, coords_ptt$col, coords_ptt$time_d)
  coords_tr_ptt <- coords_ptt[1:n_tr,]
  coords_pred_ptt <- coords_ptt[-c(1:n_tr),]
  
  # index set 
  ptts_tr <- sort(unique(coords_tr_ptt$partition))
  idx_tr <- list()
  for (m in ptts_tr) {
    idx_tr[[m]] <- which(coords_tr_ptt$partition == m)
  }
  
  # for prototypical partitions
  ptts_tr_proto <- grep(paste0("\\d+,\\d+,", sprintf(paste0("%0", nd, ".0f"), 1), # change
                               "|\\d+,\\d+,", sprintf(paste0("%0", nd, ".0f"), 2)), 
                        ptts_tr, value = TRUE)
  
  # parent partition and idx 
  pptts_tr_list <- list()
  for (m in ptts_tr) {
    # level 1: partition
    tmp <- data.frame(x = m) %>% 
      tidyr::separate(x, c("row", "col", "time"), sep = ",", convert = TRUE)
    pptts_wind <- list("NW" = NULL, "N" = NULL, "NE" = NULL, "E" = NULL) 
    
    for (h in c("NW", "N", "NE", "E")) {
      # level 2: wind direction
      ppttstmp <- c(parentS(tmp, coords_tr_ptt, h, nd), 
                    parentT(tmp, coords_tr_ptt, nd))
      # $ppartition and $idx exist only when there is at least one parents
      if (sum(is.na(ppttstmp)) < 2) {
        pptts_wind_inf <- list()
        pptts_wind_inf[['ppartition']] <- ppttstmp
        pptts_wind_inf[['pidx']] <- c(idx_tr[[ppttstmp[1]]], 
                                      idx_tr[[ppttstmp[2]]])                      # change: important to keep ppartition order 
        pptts_wind[[h]] <- pptts_wind_inf
      }
    }
    pptts_tr_list[[m]] <- pptts_wind
  }
  
  ###########
  # Methods #
  ###########
  # bdags
  ybar <- mean(y_tr) 
  time_bdags <- system.time(
    out <- bdags(y = y_tr - ybar, X = NULL,
                 coords_ptt = as.matrix(coords_tr),
                 ptts = ptts_tr, idx = idx_tr, pptts_list = pptts_tr_list,
                 ptts_proto = ptts_tr_proto, nd = nd,
                 winds = c("NW", "N", "NE", "E"),
                 init = list(), hyper = list(la = la, ua = ua, lc = lc, uc = uc),
                 mcmc = mcmc,
                 spatiotemporal = TRUE, verbose = FALSE,
                 debug = list(psi_fixed = FALSE, psi_adaptive = TRUE, psi_unifprior = TRUE,
                              psi_griddy = FALSE, z_fixed = FALSE)) # no saving for RnH_all
  )
  
  # prediction
  ptts_pred <- sort(unique(coords_pred_ptt$partition))
  idx_pred <- list()
  for (l in ptts_pred) {
    idx_pred[[l]] <- which(coords_pred_ptt$partition == l)
  }
  
  # parent partitions and idx
  z_postm <- apply(out$z.save, 1, getmode)
  pptts_pred_list <- list()
  for (l in ptts_pred) {
    tmp <- data.frame(x = l) %>%
      tidyr::separate(x, c("row", "col", "time"), sep = ",", convert = TRUE)
    if (l %in% ptts_tr) {
      h <- z_postm[which(ptts_tr == l)]
      pptts <- c(l,
                 (pptts_tr_list[[l]])[[h]]$ppartition, # parent chosen by wind
                 sprintf(ptt_format(nd), tmp$row, tmp$col, tmp$time+1)) # future
    } else {
      pptts <- parent4NN(tmp, coords_tr_ptt, nd)
    }
    pptts_idx <- NULL
    for (i in 1:length(pptts)) {
      pptts_idx <- c(pptts_idx, idx_tr[[pptts[i]]])
    }
    pptts_pred_list[[l]] <- list(ppartition = pptts, pidx = pptts_idx)
  }

  # sample w_pred and y_pred from posterior predictive dist
  time_pred <- system.time({
    bdags_pred <- bdags_predict(as.matrix(coords_tr),
                                as.matrix(coords_tt),
                                ptts_pred,
                                idx_pred,
                                pptts_pred_list,
                                out$w.save,
                                out$psi.save,
                                out$sig_sq.save,
                                out$tau_sq.save,
                                verbose = FALSE,
                                num_threads = 10)
  })
  
  # total time spent 
  tot_time[,s] <- ((time_bdags + time_pred)/60)[1:3]
  
  # parameter estimation summary
  tausq_hat[s] <- mean(out$tau_sq.save) 
  psi_hat[,s] <- rowMeans(out$psi.save) 
  sigsq_hat[s] <- mean(out$sig_sq.save) 
  z_save[[s]] <- out$z.save
  
  # prediction summary
  y_pred.save <- bdags_pred$y_pred.save
  w_pred.save <- bdags_pred$w_pred.save
  
  w_bdag <- rowMeans(w_pred.save)
  y_bdag <- rowMeans(y_pred.save) + ybar
  y_bdag_qt <- apply(y_pred.save, 1, function(x) quantile(x, probs = c(0.025, 0.975)))
  y_bdag_low <- y_bdag_qt[1,] + ybar
  y_bdag_hi <- y_bdag_qt[2,] + ybar

  coverage[s] <- mean(ifelse(y_tt > y_bdag_low & y_tt < y_bdag_hi, 1, 0))
  meanwidth[s] <- mean(y_bdag_hi - y_bdag_low)
  rmspe[s] <- sqrt(mean((y_tt-y_bdag)^2))
  mape[s] <- mean(abs(y_tt-y_bdag))
  
  setTxtProgressBar(pb, s/25) 
}
close(pb)

saveRDS(list(rmspe = rmspe, 
             mape = mape, 
             coverage = coverage, 
             meanwidth = meanwidth, 
             tot_time = tot_time, 
             tausq_hat = tausq_hat, 
             psi_hat = psi_hat, 
             sigsq_hat = sigsq_hat, 
             z_save = z_save, 
             data0 = data0,                                                     # seed = 3
             data = list(coords_tr = coords_tr,                                 
                         coords_tt = coords_tt, 
                         w_tr = w_tr, 
                         w_tt = w_tt,
                         y_tr = y_tr, 
                         y_tt = y_tt,
                         idx_tr = idx_tr,                                       
                         pptts_tr_list = pptts_tr_list, 
                         ptts_tr_proto = ptts_tr_proto,
                         ptts_tr = ptts_tr), 
             out = out,
             pred = bdags_pred),
        paste0(path, "sim2/bdags_sim2l_bdaggp_all.RDS"))

