# Bag of DAGs Simulations #
#########
# Model #
#########
# y(l) = X(l)^T %*% beta + w(l) + eps(l), i = 1, ..., n
# l = (s, t)
# X(l)^T: (1 x p), 
# eps(l) ~ N(0, tau_sq)
# w|z=h ~ N(0, sig_sq*Ctilde_h(phi)) for h = 1, ..., K where 
# Ctilde_h(phi)^{-1} = (I-H_h(phi))^T %*% R_h(phi)^{-1} %*% (I-H_h(phi))
# H_h(phi) is a sparse matrix whose non-zero elements' locations are determined by the hth DAG. 
# R_h(phi) is a diagonal matrix. 
# H_h(phi) and R_h(phi) are conditional mean coefficient and conditional variance of normal distributions. 
# Assume a nonseparable, stationary, and isotropic spatio-temporal correlation function
# Cor(w(l), w(l + (h,u))) = exp(-c||h||/(a|u|+1)^{kappa/2})/(a|u|+1)
# c: spatial decay, c > 0
# a: temporal decay, a > 0 
# kappa: interaction between space and time 

rm(list = ls())

# dependencies 
library(tidyverse)
theme_set(theme_bw())
library(meshed)
library(INLA)
library(readr)

# source code 
path <- "~/BAG/"
source(paste0(path, "scr/bdags_spatiotemporal_source_final.R"))
source(paste0(path, "scr/bdags_utils.R"))
Rcpp::sourceCpp(paste0(path, 'scr/bdags_source2.cpp'))
Rcpp::sourceCpp(paste0(path, 'scr/bdags_predict.cpp'))

########
# Data #
########
# specify number of grid on each axis
ngrid <- 40
n_time <- 8
xgrid <- seq(0, 1, length = ngrid)
ygrid <- xgrid
tgrid <- seq(0, 1, length = n_time)
xytgrid <- expand.grid(easting = xgrid, northing = ygrid, time = tgrid) %>%
  arrange(time, easting, northing)
n <- nrow(xytgrid)
coords <- xytgrid

# mixture
K <- 4

# assign partitions (irregular partitions)
n_easting <- 6 
n_northing <- 6 

# wind directions
nd <- floor(log10(max(n_northing, n_easting, n_time))) + 1
coords_ptt <- coords
northing_sint <- seq(0, 1, length = (n_northing-2)^2+1)
northing_Lint <- seq(0, 1, length = (n_northing-2)+1)
breaks_northing <- c(northing_sint[1:2], northing_Lint[2:(n_northing-2)], northing_sint[(n_northing-2)^2+0:1])
coords_ptt$row <- (n_northing+1) -
  as.numeric(cut(coords_ptt$northing, 
                 breaks = breaks_northing, 
                 labels = 1:n_northing, include.lowest = T)) # 1 from the top
easting_sint <- seq(0, 1, length = (n_easting-2)^2+1)
easting_Lint <- seq(0, 1, length = (n_easting-2)+1)
breaks_easting <- c(easting_sint[1:2], easting_Lint[2:(n_easting-2)], easting_sint[(n_easting-2)^2+0:1])
coords_ptt$col <- as.numeric(cut(coords_ptt$easting, 
                                 breaks = breaks_easting, 
                                 labels = 1:n_easting, include.lowest = T))
coords_ptt$time_d <- as.numeric(as.character(coords_ptt$time*(n_time-1) + 1))
coords_ptt$partition <- sprintf(ptt_format(nd),
                                coords_ptt$row, coords_ptt$col,
                                coords_ptt$time_d)

ptts <- sort(unique(coords_ptt$partition))
z_true <- rep("W", length(ptts)) 
ptt_NW <- grep("\\d+,4,2|\\d+,5,2|\\d+,6,2|\\d+,\\d+,3|1,\\d+,4|2,\\d+,4|3,\\d+,4|4,2,8|4,3,8|4,4,8|4,5,8|4,6,8|5,6,8|6,6,8", ptts)
z_true[ptt_NW] <- "NW"
ptt_N <- grep("4,\\d+,4|5,\\d+,4|6,\\d+,4|\\d+,\\d+,5|1,\\d+,6|2,\\d+,6|3,\\d+,6|3,1,8|3,2,8|3,3,8|3,4,8|3,5,8|4,1,8", ptts)
z_true[ptt_N] <- "N"
ptt_NE <- grep("4,\\d+,6|5,\\d+,6|6,\\d+,6|\\d+,\\d+,7|5,1,8|5,2,8|5,3,8|5,4,8|5,5,8|6,1,8|6,2,8|6,3,8|6,4,8|6,5,8", ptts)
z_true[ptt_NE] <- "NE"

# mcmc 
mcmc <- list(save=1000, burn=8000, thin=2)

# prior 
tmaxdist <- max(dist(coords[,3], method = "manhattan"))
la <- (1/0.2-1)/tmaxdist # correlation = 0.2 at the maximum distance 
ua <- (1/0.2-1)/(0.5*tmaxdist) # correlation = 0.2 at the half maximal distance 
spmaxdist <- max(dist(coords[,1:2]))
lc <- -log(0.8)/(spmaxdist) # correlation = 0.8 at the maximum distance 
uc <- -log(0.8)/(0.2*spmaxdist) # correlation = 0.8 at one fifth of the maximum distance 

# generate seed
set.seed(123)
seedsave <- sample(10000, 100)
seedsave <- c(seedsave[1:24], 123)

# save results
rmspe = mape = coverage = meanwidth = beta_hat = tausq_hat = sigsq_hat <- rep(0, 25)
psi_hat = tot_time <- matrix(0, nrow = 3, ncol = 25)
z_save <- list()

pb = txtProgressBar(style=3,width=50)
for (s in 1:25) {
  seed <- seedsave[s]
  set.seed(seed)
  
  data <- rbdag(coords = coords, direction = c("W", "NW", "N", "NE"), 
        n_easting = n_easting, n_northing = n_northing, z_true = z_true,
        irregular_partitions = TRUE,
        breaks_easting = breaks_easting, breaks_northing = breaks_northing, 
        params = list(a = 5, c = 0.5, kappa = .9,
                      beta = 2, sig_sq = 2, tau_sq = 0.01), seed = seed)
  
  #################
  # Training data #
  #################
  # train data
  prob <- 0.8 
  grid0 <- expand.grid(easting = xgrid, northing = ygrid)
  
  idx_tr_tmp <- sort(sample(nrow(grid0), nrow(grid0)*prob))
  xygrid_tr <- list()
  for (tt in 1:n_time) {
    xygrid_tr[[tt]] <- data.frame(grid0[idx_tr_tmp,], time = tgrid[[tt]])
  }
  xygrid_tr <- do.call(rbind, xygrid_tr) %>% arrange(easting, northing, time)
  data_tr <- left_join(xygrid_tr,
                       data %>% mutate(idx = 1:n), 
                       by = c("easting", "northing", "time"))
  tr_idx <- data_tr$idx
  n_tr <- length(tr_idx)
  n_tt <- n - n_tr
  w_tr <- data_tr$w
  w_tt <- data$w[-tr_idx]
  y_tr <- data_tr$y
  y_tt <- data$y[-tr_idx]
  X_tr <- data_tr$X
  X_tt <- data$X[-tr_idx]
  
  coords_tr <- data_tr[, c("easting", "northing", "time")] 
  coords_tt <- data[-tr_idx, c("easting", "northing", "time")] 
  
  # partition the training set domain 
  nd <- floor(log10(max(n_northing, n_easting, n_time))) + 1
  coords_ptt <- rbind(coords_tr[,c("easting", "northing", "time")], 
                      coords_tt[,c("easting", "northing", "time")])
  coords_ptt$row <- (n_northing+1) -
    as.numeric(cut(coords_ptt$northing, 
                   breaks = breaks_northing, 
                   labels = 1:n_northing, include.lowest = T)) # 1 from the top
  coords_ptt$col <- as.numeric(cut(coords_ptt$easting, 
                                   breaks = breaks_easting, 
                                   labels = 1:n_easting, include.lowest = T))
  coords_ptt$time_d <- as.numeric(as.character(coords_ptt$time*(n_time-1) + 1))
  coords_ptt$partition <- sprintf(ptt_format(nd), 
                                  coords_ptt$row, coords_ptt$col, coords_ptt$time_d)
  coords_tr_ptt <- coords_ptt[1:n_tr,]
  coords_pred_ptt <- coords_ptt[-c(1:n_tr),]
  
  # index set 
  ptts_tr <- sort(unique(coords_tr_ptt$partition))
  idx_tr <- list()
  for (m in ptts_tr) {
    idx_tr[[m]] <- which(coords_tr_ptt$partition == m)
  }
  
  # for prototypical partitions
  ptts_tr_proto <- grep(paste0("\\d+,\\d+,", sprintf(paste0("%0", nd, ".0f"), 1), # change
                               "|\\d+,\\d+,", sprintf(paste0("%0", nd, ".0f"), 2)), 
                        ptts_tr, value = TRUE)
  
  # parent partition and idx 
  pptts_tr_list <- list()
  for (m in ptts_tr) {
    # level 1: partition
    tmp <- data.frame(x = m) %>% 
      tidyr::separate(x, c("row", "col", "time"), sep = ",", convert = TRUE)
    pptts_wind <- list("W" = NULL, "NW" = NULL, "N" = NULL, "NE" = NULL)         # change: important for Rcpp
    
    for (h in c("W", "NW", "N", "NE")) {
      # level 2: wind direction
      ppttstmp <- c(parentS(tmp, coords_tr_ptt, h, nd), 
                    parentT(tmp, coords_tr_ptt, nd))
      # $ppartition and $idx exist only when there is at least one parents
      if (sum(is.na(ppttstmp)) < 2) {
        pptts_wind_inf <- list()
        pptts_wind_inf[['ppartition']] <- ppttstmp
        pptts_wind_inf[['pidx']] <- c(idx_tr[[ppttstmp[1]]], 
                                      idx_tr[[ppttstmp[2]]])                      # change: important to keep ppartition order 
        pptts_wind[[h]] <- pptts_wind_inf
      }
    }
    pptts_tr_list[[m]] <- pptts_wind
  }
  
  ###########
  # Methods #
  ###########
  # bdags
  ybar <- mean(y_tr) 
  time_bdags <- system.time(
    out <- bdags(y = y_tr - ybar, X = as.matrix(X_tr),
                 coords_ptt = as.matrix(coords_tr),
                 ptts = ptts_tr, idx = idx_tr, pptts_list = pptts_tr_list,
                 ptts_proto = ptts_tr_proto, nd = nd,
                 winds = c("W", "NW", "N", "NE"),
                 init = list(), hyper = list(la = la, ua = ua, lc = lc, uc = uc),
                 mcmc = mcmc,
                 spatiotemporal = TRUE, verbose = FALSE,
                 debug = list(psi_fixed = FALSE, psi_adaptive = TRUE, psi_unifprior = TRUE,
                              psi_griddy = FALSE, z_fixed = FALSE)) # no saving for RnH_all
  )
  
  # prediction
  ptts_pred <- sort(unique(coords_pred_ptt$partition))
  idx_pred <- list()
  for (l in ptts_pred) {
    idx_pred[[l]] <- which(coords_pred_ptt$partition == l)
  }
  
  # parent partitions and idx
  z_postm <- apply(out$z.save, 1, getmode)
  pptts_pred_list <- list()
  for (l in ptts_pred) {
    tmp <- data.frame(x = l) %>%
      tidyr::separate(x, c("row", "col", "time"), sep = ",", convert = TRUE)
    if (l %in% ptts_tr) {
      h <- z_postm[which(ptts_tr == l)]
      pptts <- c(l,
                 (pptts_tr_list[[l]])[[h]]$ppartition, # parent chosen by wind
                 sprintf(ptt_format(nd), tmp$row, tmp$col, tmp$time+1)) # future
    } else {
      pptts <- parent4NN(tmp, coords_tr_ptt, nd)
    }
    pptts_idx <- NULL
    for (i in 1:length(pptts)) {
      pptts_idx <- c(pptts_idx, idx_tr[[pptts[i]]])
    }
    pptts_pred_list[[l]] <- list(ppartition = pptts, pidx = pptts_idx)
  }

  # sample w_pred and y_pred from posterior predictive dist
  time_pred <- system.time({
    bdags_pred <- bdags_predict(as.matrix(coords_tr),
                                as.matrix(coords_tt),
                                ptts_pred,
                                idx_pred,
                                pptts_pred_list,
                                out$w.save,
                                out$psi.save,
                                out$sig_sq.save,
                                out$tau_sq.save,
                                verbose = FALSE,
                                num_threads = 10)
  })

  # # second prediction by wind direction 
  # # parent partitions and idx
  # pptts_pred_list2 <- list()
  # ptts_z <- matrix(NA, nrow = length(ptts_pred), ncol=mcmc$save)
  # for (i in 1:length(ptts_pred)) {
  #   l <- ptts_pred[i]
  #   if (l %in% ptts_tr) {
  #     ptts_z[i,] <- out$z.save[which(ptts_tr == l),]
  #     pptts = pptts_idx <- list()
  #     for (h in c("W", "NW", "N", "NE")) {
  #       parent_dir <- (pptts_tr_list[[l]])[[h]]
  #       pptts[[h]] <- c(l, parent_dir$ppartition)[!is.na(c(l, parent_dir$ppartition))]
  #       pptts_idx[[h]] <- c(idx_tr[[l]], parent_dir$pidx)
  #     }
  #   } else {
  #     pptts <- parent4NN(tmp, coords_tr_ptt, nd)
  #     pptts_idx <- NULL
  #     for (i in 1:length(pptts)) {
  #       pptts_idx <- c(pptts_idx, idx_tr[[pptts[i]]])
  #     }
  #   }
  #   pptts_pred_list2[[l]] <- list(ppartition = pptts, pidx = pptts_idx)
  # }
  # nullList <- list("W" = NULL, "NW" = NULL, "N" = NULL, "NE" = NULL)
  # 
  # # sample w_pred and y_pred from posterior predictive dist
  # time_pred2 <- system.time({
  #   bdags_pred2 <- bdags_predict_bywind(coords_tr = as.matrix(coords_tr), 
  #                                       coords_pred = as.matrix(coords_tt), 
  #                                       ptts_pred = ptts_pred, 
  #                                       idx_pred = idx_pred, 
  #                                       pptts_pred_list = pptts_pred_list2, 
  #                                       ptts_z = ptts_z,
  #                                       w_save = out$w.save,
  #                                       psi_save = out$psi.save, 
  #                                       sigsq_save = out$sig_sq.save,
  #                                       tausq_save = out$tau_sq.save,
  #                                       winds = c("W", "NW", "N", "NE"),
  #                                       nullList = nullList,
  #                                       verbose = TRUE, 
  #                                       num_threads = 10)
  # })
  
  # total time spent 
  tot_time[,s] <- ((time_bdags + time_pred)/60)[1:3]
  
  # parameter estimation summary
  beta_hat[s] <- mean(out$beta.save)
  beta_hat_low <- quantile(out$beta.save, probs = 0.025)
  beta_hat_hi <- quantile(out$beta.save, probs = 0.975)
  tausq_hat[s] <- mean(out$tau_sq.save) 
  psi_hat[,s] <- rowMeans(out$psi.save) 
  sigsq_hat[s] <- mean(out$sig_sq.save) 
  z_save[[s]] <- out$z.save
  
  # prediction summary
  y_pred.save <- bdags_pred$y_pred.save
  w_pred.save <- bdags_pred$w_pred.save
  
  w_bdag <- rowMeans(w_pred.save)
  y_bdag <- X_tt*beta_hat[s] + rowMeans(y_pred.save) + ybar
  y_bdag_qt <- apply(y_pred.save, 1, function(x) quantile(x, probs = c(0.025, 0.975)))
  y_bdag_low <- X_tt*beta_hat_low + y_bdag_qt[1,] + ybar
  y_bdag_hi <- X_tt*beta_hat_hi + y_bdag_qt[2,] + ybar

  coverage[s] <- mean(ifelse(y_tt > y_bdag_low & y_tt < y_bdag_hi, 1, 0))
  meanwidth[s] <- mean(y_bdag_hi - y_bdag_low)
  rmspe[s] <- sqrt(mean((y_tt-y_bdag)^2))
  mape[s] <- mean(abs(y_tt-y_bdag))
  
  setTxtProgressBar(pb, s/25) 
}
close(pb)

saveRDS(list(rmspe = rmspe, 
             mape = mape, 
             coverage = coverage, 
             meanwidth = meanwidth, 
             tot_time = tot_time, 
             beta_hat = beta_hat, 
             tausq_hat = tausq_hat, 
             psi_hat = psi_hat, 
             sigsq_hat = sigsq_hat, 
             z_save = z_save,
             data = list(idx_tr = idx_tr,                                       # seed = 123
                         pptts_tr_list = pptts_tr_list, 
                         ptts_tr_proto = ptts_tr_proto,
                         ptts_tr = ptts_tr, 
                         breaks_easting = breaks_easting, 
                         breaks_northing = breaks_northing), 
             out = out,
             pred = bdags_pred),
        paste0(path, "sim1/bdags_sim1c_bdaggp_all.RDS"))

