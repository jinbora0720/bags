###################################################
# On Feb 4 - 5 (8pm - 7am), NW winds seem obvious #
# original scale                                  #
###################################################
# Air Quality Analysis in South Korea #
# Table S1, Figure S2. 
rm(list = ls())

# dependencies 
library(tidyverse)
theme_set(theme_bw())
library(sf)
library(meshed)

# source code 
path <- "~/BAG/"
source(paste0(path, "scr/bdags_spatiotemporal_source_final.R"))
source(paste0(path, "scr/bdags_utils.R"))
Rcpp::sourceCpp(paste0(path, 'scr/bdags_source2.cpp'))
Rcpp::sourceCpp(paste0(path, 'scr/bdags_predict.cpp'))

# call data 
data <- readRDS(paste0(path, "data/KR_Feb_pm25.rds"))
KR_sf <- readRDS(paste0(path, "data/KR_sf.rds"))

# 2020-02-04 ~ 2020-02-05 wind direction 
timelist <- c(2020020420:2020020424, 2020020501:2020020507) # without much traffic 

data_short <- data %>% filter(time %in% timelist) %>% 
  group_by(station_id, time) %>% 
  summarise(long = unique(long), 
            lat = unique(lat),
            PM25 = mean(PM25, na.rm = TRUE)) %>% 
  mutate(logpm25 = log(PM25))

data_short_full <- data_short %>% 
  mutate(n = length(unique(time))) %>% 
  filter(n == length(timelist)) %>% dplyr::select(-n) %>%
  ungroup()

# coordinates 
coords <- unique(data_short_full[,c("station_id", "long", "lat")]) 
coords_sf <- st_transform(st_as_sf(coords, coords = c("long", "lat"), crs = 4326), crs = st_crs(KR_sf))
coords_prj <- data.frame(station_id = coords$station_id, 
                         coords_sf %>% st_coordinates()) %>% 
  rename(easting = X, northing = Y)
data_short_full2 <- left_join(data_short_full, coords_prj, by = "station_id")

# KR box
KR_range <- st_bbox(KR_sf)
KR_range <- data.frame(xmin = as.numeric(KR_range$xmin), 
                       ymin = as.numeric(KR_range$ymin), 
                       xmax = 1190000, 
                       ymax = as.numeric(KR_range$ymax))

timedf <- data.frame(time = timelist, time_d = 1:length(timelist))
data0 <- left_join(data_short_full2, timedf, by = "time") %>% 
  rename(true_easting = easting, true_northing = northing) %>% 
  mutate(time = (time_d - min(time_d))/(max(time_d) - min(time_d)), 
         easting = true_easting/1000, northing = true_northing/1000) # m to km 

tgrid <- sort(unique(data0$time))
n_time <- length(tgrid)

# train data
prob <- 0.7
set.seed(123)
data0 <- data0 %>% group_by(easting, northing) %>% 
  mutate(train = ifelse(runif(1) < prob, 1, 0)) %>% 
  ungroup(easting, northing)
n <- nrow(data0)

tr_idx <- which(data0$train == 1)
n_tr <- length(tr_idx)
y_tr <- data0$logpm25[tr_idx]
coords_tr <- data0[tr_idx, c("easting", "northing", "time", 
                             "time_d", "true_easting", "true_northing")] 

tt_idx <- which(data0$train == 0)
n_tt <- length(tt_idx)
y_tt <- data0$logpm25[tt_idx]
coords_tt <- data0[tt_idx, c("easting", "northing", "time", 
                             "time_d", "true_easting", "true_northing")] 

# prediction data
xgrid <- seq(KR_range$xmin, KR_range$xmax, length = 110)
ygrid <- seq(KR_range$ymin, KR_range$ymax, length = 150)
xygrid <- expand.grid(easting = xgrid, northing = ygrid, time_d = 1:n_time)
xygrid_sf <- st_as_sf(xygrid, coords = c("easting", "northing"), crs = st_crs(KR_sf))

xygrid <- xygrid %>% mutate(inKR = as.numeric(st_intersects(xygrid_sf, KR_sf$geometry)))

coords_grid <- xygrid %>% filter(!is.na(inKR)) %>% 
  rename(true_easting = easting, true_northing = northing) %>% 
  mutate(easting = true_easting/1000, northing = true_northing/1000, 
         time = (time_d - min(time_d))/(max(time_d) - min(time_d)))
n_grid <- nrow(coords_grid)

# pre-processing 
# south korea area 
# width 443.890km = (KR_range$xmax - KR_range$xmin)/1000
# height 609.690km = (KR_range$ymax - KR_range$ymin)/1000
n_easting <- 17 # ~ 26km
n_northing <- 23 # ~ 27km
nd <- floor(log10(max(n_northing, n_easting, n_time))) + 1
coords_ptt <- rbind(coords_tr[,c("easting", "northing", "time", "time_d")], 
                    coords_tt[,c("easting", "northing", "time", "time_d")], 
                    coords_grid[,c("easting", "northing", "time", "time_d")])
coords_ptt$row <- (n_northing+1) - 
  as.numeric(cut_interval(coords_ptt$northing, 
                          n = n_northing, 
                          labels = 1:n_northing)) # 1 from the top 
coords_ptt$col <- as.numeric(cut_interval(coords_ptt$easting, 
                                          n = n_easting, 
                                          labels = 1:n_easting))
coords_ptt$partition <- sprintf(ptt_format(nd), 
                                coords_ptt$row, coords_ptt$col, coords_ptt$time_d)
coords_tr_ptt <- coords_ptt[1:n_tr,]
coords_pred_ptt <- coords_ptt[-c(1:n_tr),]

easting_cut <- seq(KR_range$xmin, KR_range$xmax, length = n_easting + 1)
northing_cut <- seq(KR_range$ymin, KR_range$ymax, length = n_northing + 1)
easting_midval <- 0.5*easting_cut[1:n_easting] + 0.5*easting_cut[-1]
northing_midval <- 0.5*northing_cut[1:n_northing] + 0.5*northing_cut[-1]

# index set 
ptts_tr <- sort(unique(coords_tr_ptt$partition))
idx_tr <- list()
for (m in ptts_tr) {
  idx_tr[[m]] <- which(coords_tr_ptt$partition == m)
}

# for prototypical partitions
ptts_tr_proto <- grep(paste0("\\d+,\\d+,", sprintf(paste0("%0", nd, ".0f"), 1),
                             "|\\d+,\\d+,", sprintf(paste0("%0", nd, ".0f"), 2)), 
                      ptts_tr, value = TRUE)

# parent partition and idx 
pptts_tr_list <- list()
for (m in ptts_tr) {
  # level 1: partition
  tmp <- data.frame(x = m) %>% 
    tidyr::separate(x, c("row", "col", "time"), sep = ",", convert = TRUE)
  pptts_wind <- list("SW" = NULL, "W" = NULL, "NW" = NULL, "N" = NULL)          
  
  for (h in c("SW", "W", "NW", "N")) {
    # level 2: wind direction
    ppttstmp <- c(parentS(tmp, coords_tr_ptt, h, nd), 
                  parentT(tmp, coords_tr_ptt, nd))
    # $ppartition and $idx exist only when there is at least one parents
    if (sum(is.na(ppttstmp)) < 2) {
      pptts_wind_inf <- list()
      pptts_wind_inf[['ppartition']] <- ppttstmp
      pptts_wind_inf[['pidx']] <- c(idx_tr[[ppttstmp[1]]], 
                                    idx_tr[[ppttstmp[2]]])                      
      pptts_wind[[h]] <- pptts_wind_inf
    }
  }
  pptts_tr_list[[m]] <- pptts_wind
}

###########
# Methods #
###########
mcmc <- list(save=1000, burn=8000, thin=2)

# prior
tmaxdist <- max(dist(coords_tr_ptt[,3], method = "manhattan"))
la <- (1/0.95-1)/tmaxdist # correlation = 0.95 at the maximum distance
ua <- (1/0.05-1)/(0.5*tmaxdist) # correlation = 0.05 at half the maximum distance
spmaxdist <- max(dist(coords_tr_ptt[,1:2]))
lc <- -log(0.5)/spmaxdist # correlation = 0.5 at the maximal distance
uc <- -log(0.01)/(0.1*spmaxdist) # correlation = 0.01 at 10% of the maximum distance

# centering 
ybar <- mean(y_tr)

# ## bdags ##
# set.seed(123)
# time_bdags <- system.time(
#   out <- bdags(y = y_tr - ybar, X = NULL,
#                coords_ptt = as.matrix(coords_tr_ptt[,c("easting", "northing", "time")]),
#                ptts = ptts_tr, idx = idx_tr, pptts_list = pptts_tr_list,
#                ptts_proto = ptts_tr_proto, nd = nd,
#                winds = c("SW", "W", "NW", "N"),
#                init = list(), hyper = list(la = la, ua = ua, lc = lc, uc = uc),
#                mcmc = mcmc,
#                spatiotemporal = TRUE, verbose = TRUE,
#                debug = list(psi_fixed = FALSE, psi_adaptive = TRUE, psi_unifprior = TRUE,
#                             psi_griddy = FALSE, z_fixed = FALSE)) # no saving for RnH_all
# )
# 
# # prediction
# ptts_pred <- sort(unique(coords_pred_ptt$partition))
# idx_pred <- list()
# for (l in ptts_pred) {
#   idx_pred[[l]] <- which(coords_pred_ptt$partition == l)
# }
# 
# # parent partitions and idx
# z_postm <- apply(out$z.save, 1, getmode)
# pptts_pred_list <- list()
# for (l in ptts_pred) {
#   tmp <- data.frame(x = l) %>%
#     tidyr::separate(x, c("row", "col", "time"), sep = ",", convert = TRUE)
#   if (l %in% ptts_tr) {
#     h <- z_postm[which(ptts_tr == l)]
#     pptts <- c(l,
#                (pptts_tr_list[[l]])[[h]]$ppartition, # parent chosen by wind
#                sprintf(ptt_format(nd), tmp$row, tmp$col, tmp$time+1)) # future
#   } else {
#     pptts <- parent8NN(tmp, coords_tr_ptt, nd) ## different from all the other prediction: parent4NN
#   }
#   pptts_idx <- NULL
#   for (i in 1:length(pptts)) {
#     pptts_idx <- c(pptts_idx, idx_tr[[pptts[i]]])
#   }
#   pptts_pred_list[[l]] <- list(ppartition = pptts, pidx = pptts_idx)
# }
# 
# # sample w_pred and y_pred from posterior predictive dist
# set.seed(123)
# time_pred <- system.time({
#   bdags_pred <- bdags_predict(as.matrix(coords_tr_ptt[,c("easting", "northing", "time")]),
#                               as.matrix(coords_pred_ptt[,c("easting", "northing", "time")]),
#                               ptts_pred,
#                               idx_pred,
#                               pptts_pred_list,
#                               out$w.save,
#                               out$psi.save,
#                               out$sig_sq.save,
#                               out$tau_sq.save,
#                               verbose = TRUE,
#                               num_threads = 10)
# })
# 
# mgp ##
# y <- as.matrix(c(y_tr, rep(NA, n_tt + n_grid)))
# x <- matrix(1, nrow = n + n_grid, ncol = 1)
# 
# set.seed(123)
# time_mgp <- system.time({
#   meshout <- spmeshed(family=c("gaussian"),
#                       y, x, coords = as.matrix(coords_ptt[,c("easting", "northing", "time")]),
#                       k = 1,
#                       axis_partition = c(n_easting, n_northing, n_time),
#                       prior = list(phi = c(min(lc,la), max(uc,ua))),
#                       settings = list(adapting=TRUE, forced_grid=NULL,
#                                       cache=NULL, ps=TRUE, saving=TRUE),
#                       starting = list(beta=NULL, tausq=NULL, theta=NULL,
#                                       lambda=matrix(1,1,1), w=NULL,
#                                       nu = NULL, mcmcsd=.05, mcmc_startfrom=0),
#                       debug = list(sample_beta=TRUE, sample_tausq=TRUE,
#                                    sample_theta=TRUE, sample_w=TRUE, sample_lambda=FALSE,
#                                    verbose=TRUE, debug=FALSE),
#                       n_samples = mcmc$save, n_burn = mcmc$burn, n_thin = mcmc$thin,
#                       verbose = 0,
#                       n_threads = 10)
# })
# 
# mgp2 ##
# coords_mgp <- coords_ptt[,c("easting", "northing", "time")] %>%
#   mutate(easting = -easting +1) # arrow switching (west to east)
# 
# set.seed(123)
# time_mgp2 <- system.time({
#   meshout2 <- spmeshed(family=c("gaussian"),
#                       y, x, coords = coords_mgp,
#                       k = 1,
#                       axis_partition = c(n_easting, n_northing, n_time),
#                       prior = list(phi = c(min(lc,la), max(uc,ua))),
#                       settings = list(adapting=TRUE, forced_grid=NULL,
#                                       cache=NULL, ps=TRUE, saving=TRUE),
#                       starting = list(beta=NULL, tausq=NULL, theta=NULL,
#                                       lambda=matrix(1,1,1), w=NULL,
#                                       nu = NULL, mcmcsd=.05, mcmc_startfrom=0),
#                       debug = list(sample_beta=TRUE, sample_tausq=TRUE,
#                                    sample_theta=TRUE, sample_w=TRUE, sample_lambda=FALSE,
#                                    verbose=TRUE, debug=FALSE),
#                       n_samples = mcmc$save, n_burn = mcmc$burn, n_thin = mcmc$thin,
#                       verbose = 0,
#                       n_threads = 10)
# })
# 
# # save results
# saveRDS(list(time_bdags = time_bdags, out = out,
#              time_pred = time_pred, pred = bdags_pred,
#              time_mgp = time_mgp, mgp = meshout, 
#              time_mgp2 = time_mgp2, mgp2 = meshout2),
#         paste0(path, "analysis/bdags_KR_hourly.RDS"))
#
# split bdags_KR_hourly.RDS due to size
# y_pred.save <- bdags_pred$y_pred.save
# y_bdag <- rowMeans(y_pred.save) + ybar
# y_bdag_qt <- apply(y_pred.save, 1, function(x) quantile(x, probs = c(0.025, 0.975)))
# y_bdag_low <- y_bdag_qt[1,] + ybar
# y_bdag_hi <- y_bdag_qt[2,] + ybar
# 
# y_mgp <- meshout$yhat_mcmc %>% summary_list_mean()
# y_mgp_low <- meshout$yhat_mcmc %>% summary_list_q(q = 0.025)
# y_mgp_hi <- meshout$yhat_mcmc %>% summary_list_q(q = 0.975)
# 
# saveRDS(list(time_bdags = time_bdags, time_pred = time_pred,
#              out = out, y_bdag = y_bdag, y_bdag_low = y_bdag_low, y_bdag_hi = y_bdag_hi), 
#         paste0(path, "analysis/bdags_KR_hourly_bdaggp.RDS"))
# saveRDS(list(time_mgp = time_mgp, 
#              tausq_mcmc = meshout$tausq_mcmc,
#              theta_mcmc = meshout$theta_mcmc,
#              coordsdata = meshout$coordsdata, 
#              y_mgp = y_mgp, y_mgp_low = y_mgp_low, y_mgp_hi = y_mgp_hi), 
#         paste0(path, "analysis/bdags_KR_hourly_mgp.RDS"))

###########
# Results #
###########
# call results 
KRbdag <- readRDS(paste0(path, "analysis/bdags_KR_hourly_bdaggp.RDS"))
out <- KRbdag$out
y_bdag <- KRbdag$y_bdag
y_bdag_low <- KRbdag$y_bdag_low
y_bdag_hi <- KRbdag$y_bdag_hi

KRmgp <- readRDS(paste0(path, "analysis/bdags_KR_hourly_mgp.RDS"))
tausq_mcmc <- KRmgp$tausq_mcmc[,mcmc$thin*(1:mcmc$save)] 
psi_mcmc <- KRmgp$theta_mcmc[-4,,mcmc$thin*(1:mcmc$save)] # temporal decay, spatial decay, interaction
sigsq_mcmc <- KRmgp$theta_mcmc[4,,mcmc$thin*(1:mcmc$save)] 
y_mgp <- KRmgp$y_mgp
y_mgp_low <- KRmgp$y_mgp_low
y_mgp_hi <- KRmgp$y_mgp_hi

# time 
(KRbdag$time_bdags + KRbdag$time_pred)/60
(KRmgp$time_mgp)/60
rm(KRbdag, KRmgp)

# parameter estimation 
(tausq_hat <- mean(out$tau_sq.save)) %>% round(3); quantile(out$tau_sq.save, probs = c(0.025, 0.975)) %>% round(3)
mean(tausq_mcmc) %>% round(3); quantile(tausq_mcmc, probs = c(0.025, 0.975)) %>% round(3)

## a, c, kappa
(psi_hat <- rowMeans(out$psi.save)) %>% round(3); apply(out$psi.save, 1, function(x) quantile(x, probs = c(0.025, 0.975))) %>% round(3)
rowMeans(psi_mcmc) %>% round(3); apply(psi_mcmc, 1, function(x) quantile(x, probs = c(0.025, 0.975))) %>% round(3)

(sigsq_hat <- mean(out$sig_sq.save)) %>% round(3); quantile(out$sig_sq.save, probs = c(0.025, 0.975)) %>% round(3)
mean(sigsq_mcmc) %>% round(3); quantile(sigsq_mcmc, probs = c(0.025, 0.975)) %>% round(3)

# prediction results
set.seed(123)
y_tr.save <- matrix(0, n_tr, mcmc$save)
for (s in 1:mcmc$save) {
  y_tr.save[,s] <- out$w.save[,s] + sqrt(out$tau_sq.save[s])*rnorm(n_tr)
}
yhat <- rowMeans(y_tr.save) + ybar
yhat_qt <- apply(y_tr.save, 1, function(x) quantile(x, probs = c(0.025, 0.975)))
yhat_low <- yhat_qt[1,] + ybar
yhat_hi <- yhat_qt[2,] + ybar

res <- data.frame(coords_ptt[,c("easting", "northing", "time")], 
                  y = c(y_tr, y_tt, rep(NA, n_grid)), 
                  y_bdag = c(yhat, y_bdag), 
                  y_bdag_low = c(yhat_low, y_bdag_low), 
                  y_bdag_hi = c(yhat_hi, y_bdag_hi)) %>% 
  left_join(data.frame(mgp$coordsdata,
                       y_mgp = y_mgp, 
                       y_mgp_low = y_mgp_low, 
                       y_mgp_hi = y_mgp_hi), by = c("easting", "northing", "time")) %>%
  mutate(bdag_inCI = ifelse((y > y_bdag_low & y < y_bdag_hi), 1, 0),
         mgp_inCI = ifelse((y > y_mgp_low & y < y_mgp_hi), 1, 0),
         bdag_CIwidth = y_bdag_hi - y_bdag_low,
         mgp_CIwidth = y_mgp_hi - y_mgp_low)

## prediction metric
res[n_tr+1:n_tt,] %>% 
  summarise(bdag_rmspe = sqrt(mean((y-y_bdag)^2)), 
            mgp_rmspe = sqrt(mean((y-y_mgp)^2)), 
            bdag_mape = mean(abs(y-y_bdag)), 
            mgp_mape = mean(abs(y-y_mgp)), 
            bdag_coverage = mean(bdag_inCI), 
            mgp_coverage = mean(mgp_inCI), 
            bdag_meanwidth = mean(bdag_CIwidth), 
            mgp_meanwidth = mean(mgp_CIwidth)) %>% 
  round(3)

# infer wind direction 
z_postm <- apply(out$z.save, 1, getmode)
dir_mean <- data.frame(
  SW = apply(out$z.save, 1, function(x) sum(x == "SW")/mcmc$save),
  W = apply(out$z.save, 1, function(x) sum(x == "W")/mcmc$save),
  NW = apply(out$z.save, 1, function(x) sum(x == "NW")/mcmc$save),
  N = apply(out$z.save, 1, function(x) sum(x == "N")/mcmc$save)
)

## wind with the highest posterior probability 
### wind name
wind_hpp <- apply(dir_mean, 1, function(x) c("SW", "W", "NW", "N")[which.max(x)])
### posterior prob
val_hpp <- apply(dir_mean, 1, max)
### weighted average of wind directions in angle: angles should be +/- around 0 (W)
ang_mean <- pi/4*dir_mean$SW + 0*dir_mean$W - pi/4*dir_mean$NW - pi/2*dir_mean$N

## by partitions 
time_name <- c(paste0("2020-02-04 ", 20:24, ":00"),
               paste0("2020-02-05 ", 1:7, ":00"))
bdag_wind_df <- data.frame(partition = ptts_tr, 
                           partition1 = ptts_tr, 
                           ang_mean = ang_mean, 
                           wind_hpp = factor(wind_hpp, 
                                             levels = c("SW", "W", "NW", "N")),
                           val_hpp = val_hpp) %>% 
  tidyr::separate(partition1, c("row", "col", "time_d"), sep = ",", convert = TRUE) %>% 
  mutate(easting_center = easting_midval[col], 
         northing_center = northing_midval[n_northing + 1 - row], 
         time = time_name[time_d])

# overlay wind directions and predicted plots 
plt_res <-  (res %>% select(easting, northing, time, y, y_bdag, y_mgp)) %>% 
  left_join(rbind(coords_tr[,c("easting", "northing", "time", "true_easting", "true_northing")], 
                  coords_tt[,c("easting", "northing", "time", "true_easting", "true_northing")],
                  coords_grid[,c("easting", "northing", "time", "true_easting", "true_northing")]),
            by = c("easting", "northing", "time"))
plt_res <- plt_res %>% 
  mutate(pm_bdag = ifelse(exp(y_bdag)<=15,1,ifelse(exp(y_bdag)<=35,2,ifelse(exp(y_bdag)<=75,3,4))))

plt1list = plt2list = plt3list <- list()
ttselect <- c(2,4,8,10)
plt_res1 <- plt_res %>% filter(time %in% tgrid[ttselect])
plt_ymin1 <- min(c(plt_res1$y, plt_res1$y_bdag), na.rm = TRUE)
plt_ymax1 <- max(c(plt_res1$y, plt_res1$y_bdag), na.rm = TRUE)
for (ttt in 1:length(ttselect)) {
  tt <- ttselect[ttt]
  plt1list[[ttt]] <- plt_res %>% filter(time == tgrid[tt]) %>%
    ggplot() + geom_point(aes(true_easting, true_northing, color = y)) +
    scale_color_distiller(palette = "Spectral", direction = -1,
                          limits = c(plt_ymin1, plt_ymax1), na.value = "transparent") +
    geom_sf(data = KR_sf, fill = "NA") +
    labs(y="", x="",
         title = time_name[tt], col = "log(PM2.5)")

  plt2list[[ttt]] <- plt_res %>% filter(time == tgrid[tt]) %>%
    ggplot() + geom_point(aes(true_easting, true_northing, color = y_bdag)) +
    scale_color_distiller(palette = "Spectral", direction = -1,
                          limits = c(plt_ymin1, plt_ymax1), na.value = "transparent") +
    geom_sf(data = KR_sf, fill = "NA") +
    labs(y="", x="",
         title = time_name[tt], col = "log(PM2.5)")
  
  plt3list[[ttt]] <- plt_res[(n_tr+n_tt)+1:n_grid,] %>% filter(time == tgrid[tt]) %>%
    ggplot() + geom_tile(aes(true_easting, true_northing, fill = factor(pm_bdag))) +
    scale_fill_manual(values = c("1"="#009E73","2"="#F0E442","3"="#D55E00"),
                       labels = c("1"="good\n(0~15)","2"="moderate\n(16~35)","3"="unhealthy\n(36~75)")) +
    geom_sf(data = KR_sf, fill = "NA") +
    geom_spoke(data = bdag_wind_df %>% filter(time_d == tt),
               aes(x=easting_center, y=northing_center, angle = ang_mean),
               radius = 20000,
               arrow = arrow(length = unit(.1, 'cm'))) +
    labs(y="", x="",
         title = time_name[tt], fill = "PM2.5\n(um/m3)") + 
    theme(legend.text=element_text(size=13), 
          legend.title=element_text(size=13))
}

g1 <- ggpubr::ggarrange(plt1list[[1]], 
                        plt1list[[2]], 
                        plt1list[[3]], 
                        plt1list[[4]], 
                        common.legend = TRUE, legend = "bottom", nrow = 4) 

g2 <- ggpubr::ggarrange(plt2list[[1]],
                        plt2list[[2]],
                        plt2list[[3]],
                        plt2list[[4]],
                        common.legend = TRUE, legend = "bottom", nrow = 4) 

g3 <- ggpubr::ggarrange(plt3list[[1]], 
                        plt3list[[2]], 
                        plt3list[[3]], 
                        plt3list[[4]], 
                        common.legend = TRUE, legend = "bottom", nrow = 4) 

gall <- ggpubr::ggarrange(g1,g2,g3,ncol=3)
# ggsave(filename = paste0(path, "plots/bdags_KR_hourly_pred_final.pdf"), 
#        gall, width = 14, height = 15)

