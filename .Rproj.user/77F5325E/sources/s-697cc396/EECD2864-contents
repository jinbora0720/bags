# set.seed(123)
# time_bdags <- system.time(
#   out <- bdags(y = y_tr - ybar, X = NULL,
#                coords_ptt = as.matrix(coords_tr_ptt[,c("easting", "northing", "time")]),
#                ptts = ptts_tr, idx = idx_tr, pptts_list = pptts_tr_list,
#                ptts_proto = ptts_tr_proto, nd = nd,
#                winds = c("SW", "W", "NW", "N"),
#                init = list(), hyper = list(la = la, ua = ua, lc = lc, uc = uc),
#                mcmc = mcmc,
#                spatiotemporal = TRUE, verbose = TRUE,
#                debug = list(psi_fixed = FALSE, psi_adaptive = TRUE, psi_unifprior = TRUE,
#                             psi_griddy = FALSE, z_fixed = FALSE)) # no saving for RnH_all
# )
# 
# # prediction
# ptts_pred <- sort(unique(coords_pred_ptt$partition))
# idx_pred <- list()
# for (l in ptts_pred) {
#   idx_pred[[l]] <- which(coords_pred_ptt$partition == l)
# }
# 
# # parent partitions and idx
# z_postm <- apply(out$z.save, 1, getmode)
# pptts_pred_list <- list()
# for (l in ptts_pred) {
#   tmp <- data.frame(x = l) %>%
#     tidyr::separate(x, c("row", "col", "time"), sep = ",", convert = TRUE)
#   if (l %in% ptts_tr) {
#     h <- z_postm[which(ptts_tr == l)]
#     pptts <- c(l,
#                (pptts_tr_list[[l]])[[h]]$ppartition, # parent chosen by wind
#                sprintf(ptt_format(nd), tmp$row, tmp$col, tmp$time+1)) # future
#   } else {
#     pptts <- parent8NN(tmp, coords_tr_ptt, nd) ## different from all the other prediction: parent4NN
#   }
#   pptts_idx <- NULL
#   for (i in 1:length(pptts)) {
#     pptts_idx <- c(pptts_idx, idx_tr[[pptts[i]]])
#   }
#   pptts_pred_list[[l]] <- list(ppartition = pptts, pidx = pptts_idx)
# }
# 
# # sample w_pred and y_pred from posterior predictive dist
# set.seed(123)
# time_pred <- system.time({
#   bdags_pred <- bdags_predict(as.matrix(coords_tr_ptt[,c("easting", "northing", "time")]),
#                               as.matrix(coords_pred_ptt[,c("easting", "northing", "time")]),
#                               ptts_pred,
#                               idx_pred,
#                               pptts_pred_list,
#                               out$w.save,
#                               out$psi.save,
#                               out$sig_sq.save,
#                               out$tau_sq.save,
#                               verbose = TRUE,
#                               num_threads = 10)
# })

plot(KR_hourly$out$tau_sq.save, type = "l")
plot(KR_hourly$out$sig_sq.save, type = "l")
plot(KR_hourly$out$psi.save[1,], type = "l")
plot(KR_hourly$out$psi.save[2,], type = "l")
plot(KR_hourly$out$psi.save[3,], type = "l")

coda::effectiveSize(KR_hourly$out$tau_sq.save)
coda::effectiveSize(KR_hourly$out$sig_sq.save)
coda::effectiveSize(KR_hourly$out$psi.save[1,])
coda::effectiveSize(KR_hourly$out$psi.save[2,])
coda::effectiveSize(KR_hourly$out$psi.save[3,])
coda::effectiveSize(KR_hourly$out$sig_sq.save*KR_hourly$out$psi.save[2,])

burn <- 400 # 2*
thin <- 5 # 2* 
save <- 600/thin
samp_idx <- burn + thin*1:save

plot(KR_hourly$out$tau_sq.save[samp_idx], type = "l")
plot(KR_hourly$out$sig_sq.save[samp_idx], type = "l")
plot(KR_hourly$out$psi.save[1,samp_idx], type = "l")
plot(KR_hourly$out$psi.save[2,samp_idx], type = "l")
plot(KR_hourly$out$psi.save[3,samp_idx], type = "l")
plot(KR_hourly$out$sig_sq.save[samp_idx]*
       KR_hourly$out$psi.save[2,samp_idx], type = "l")

coda::effectiveSize(KR_hourly$out$tau_sq.save[samp_idx])*(1000/save)
coda::effectiveSize(KR_hourly$out$sig_sq.save[samp_idx])*(1000/save)
coda::effectiveSize(KR_hourly$out$psi.save[1,samp_idx])*(1000/save)
coda::effectiveSize(KR_hourly$out$psi.save[2,samp_idx])*(1000/save)
coda::effectiveSize(KR_hourly$out$psi.save[3,samp_idx])*(1000/save)
coda::effectiveSize(KR_hourly$out$sig_sq.save[samp_idx]*
                      KR_hourly$out$psi.save[2,samp_idx])*(1000/save)
